TCP_SERVER.C:

#include<stdio.h>
#include<stdlib.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<string.h>
#define SIZE 1024
void  write_file(int sockfd){
        FILE *fp;
        int n;
        char buffer[SIZE];
        fp=fopen("output.txt","w");
        while(1){
                n=recv(sockfd,buffer,SIZE,0);
                if(n<=0){
                break;
                }
                fprintf(fp,"%s",buffer);
                bzero(buffer,SIZE);
        }
}
int main(){
        char *ip ="127.0.0.1";
        int port=8080;
        int sockfd,new_sock;
        int e;

        struct sockaddr_in server_addr,new_addr;
        socklen_t addr_size;
        sockfd=socket(AF_INET,SOCK_STREAM,0);
        if(sockfd<0){
                printf("ERROR IN SOCKET CREATION\n");
                exit(1);
        }
        printf("SOCKET CREATION SUCCESSFULL....\n");

        server_addr.sin_family=AF_INET;
        server_addr.sin_port=port;
        server_addr.sin_addr.s_addr=inet_addr(ip);

        e=bind(sockfd,(struct sockaddr*)&server_addr,sizeof(server_addr));
        if(e<0)
        {
                printf("ERROR IN BINDING\n");
                exit(1);
        }
        printf("BINDING SUCCESSFULL....\n");

        e=listen(sockfd,10);
        if(e==0) printf("LISTENING....\n");
        else     printf("ERROR IN LISTENING\n");

        addr_size=sizeof(new_addr);
        new_sock=accept(sockfd,(struct sockaddr*)&new_addr,&addr_size);

        write_file(new_sock);
        printf("DATA WRITTEN SUCCESFULLY....\n");

}



TCP_CLIENT.C




#include<stdio.h>
#include<stdlib.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<string.h>
#define SIZE 1024
void send_file(FILE *fp,int sockfd)
{
        char data[SIZE]={0};
        while(fgets(data,SIZE,fp)!=NULL)
        {
                send(sockfd,data,sizeof(data),0);
                bzero(data,SIZE);
        }
}
int main(){
        char *ip="127.0.0.1";
        int port=8080;
        int sockfd;
        int e;
        FILE *fp;
        struct sockaddr_in server_addr;

        sockfd=socket(AF_INET,SOCK_STREAM,0);
        if(sockfd<0){
                printf("ERROR IN SOCKET CREATION\n");
                exit(1);
        }
        printf("SOCKET CREATION SUCCESSFULL....\n");

        server_addr.sin_family=AF_INET;
        server_addr.sin_port=port;
        server_addr.sin_addr.s_addr=inet_addr(ip);

        e=connect(sockfd,(struct sockaddr*)&server_addr,sizeof(server_addr));
        if(e==-1){
                printf("ERROR IN CONNECTION....\n");
                exit(1);
        }
        else printf("CONNECTION SUCCESSFULL....\n");

        fp=fopen("input.txt","r");

        send_file(fp,sockfd);
        printf("DATA SENT SUCCESSFULLY....\n");
        close(sockfd);
        printf("CONNECTION CLOSED....\n");



}





UDP_SERVER.C


#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>
#include<arpa/inet.h>
#include<sys/socket.h>

int main()
{
        char *ip="127.0.0.1";
        int port=2025;
        int e;

        int sockfd;
        struct sockaddr_in server_addr,client_addr;
        int addr_size;

        sockfd=socket(AF_INET,SOCK_DGRAM,0);
        if(sockfd<0){
                printf("ERROR IN SOCKET CREATION....\n");
                exit(0);
        }
        server_addr.sin_family=AF_INET;
        server_addr.sin_port=port;
        server_addr.sin_addr.s_addr=inet_addr(ip);

        e=bind(sockfd,(struct sockaddr*)&server_addr,sizeof(server_addr));
        if(e<0){
                printf("ERROR IN BINDING....\n");
                exit(0);
        }
        while(1){
                addr_size=sizeof(client_addr);
                char buffer[50];
                strcpy(buffer," ");
                recvfrom(sockfd,buffer,sizeof(buffer),0,(struct sockaddr*)&client_addr,&addr_size);
                printf("Message received from client: %s\n",buffer);
                printf("Send a message to client:");
                char ans[50];
                fgets(ans,sizeof(ans),stdin);
                sendto(sockfd,ans,sizeof(ans),0,(struct sockaddr*)&client_addr,sizeof(ans));
        }
        close(sockfd);
}





UDP_CLIENT.C:






#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>
#include<arpa/inet.h>
#include<sys/socket.h>

int main()
{
        char *ip="127.0.0.1";
        int port=2025;
        int e;

        int sockfd;
        struct sockaddr_in server_addr;
        socklen_t addr_size;

        sockfd=socket(AF_INET,SOCK_DGRAM,0);
        if(sockfd<0){
                printf("ERROR IN SOCKET CREATION....\n");
                exit(0);
        }
        server_addr.sin_family=AF_INET;
        server_addr.sin_port=port;
        server_addr.sin_addr.s_addr=inet_addr(ip);
while(1){
        char buffer[50];
        printf("Enter message to server:\n");
        fgets(buffer,sizeof(buffer),stdin);
        sendto(sockfd,buffer,sizeof(buffer),0,(struct sockaddr*)&server_addr,sizeof(buffer));

        int len=sizeof(server_addr);
        char ans[50];
        strcpy(ans," ");
        recvfrom(sockfd,ans,sizeof(ans),0,(struct sockaddr*)&server_addr,&len);
        printf("Message from server:%s\n",ans);
}
        close(sockfd);
}














